<?xml version="1.0" encoding="UTF-8"?>
<jube>
  <benchmark name="mdft_bench" outpath="bench_run">
    <comment>first jube script</comment>

    <parameterset name="compile_parameters" init_with="mdft_jube_include.xml">
      <parameter name="allinea_mode"></parameter>
      <parameter name="allinea_mode" tag="allinea,all">allinea</parameter>
      <parameter name="extrae_mode"></parameter>
      <parameter name="extrae_mode" tag="extrae,all">extrae</parameter>
      <parameter name="scalasca_mode"></parameter>
      <parameter name="scalasca_mode" tag="scalasca,all">scalasca</parameter>
      <parameter name="no_vec_mode"></parameter>
      <parameter name="no_vec_mode" tag="no_vec,all">no_vec</parameter>
      <parameter name="no_fma_mode"></parameter>
      <parameter name="no_fma_mode" tag="no_fma,all">no_fma</parameter>
      <parameter name="memory_mode"></parameter>
      <parameter name="memory_mode" tag="memory,all">memory</parameter>
      <parameter name="ref_mode"></parameter>
      <parameter name="ref_mode" tag="ref,all,no_vec,no_fma">ref</parameter>
      <parameter name="ref_compile"></parameter>
      <parameter name="ref_compile" tag="ref,allinea,memory,all">ref_compile</parameter>
  
      <parameter name="compile_scalasca" mode="python">"${compile_mode}" == "scalasca"</parameter>  
     
      <parameter name="compile_mode" mode="python">",".join([i for i in "${ref_compile} ${extrae_mode} ${scalasca_mode} ${no_fma_mode} ${no_vec_mode}".split(" ") if len(i) > 0])</parameter>
      <parameter name="cmake_line" mode="python">
		  {"scalasca" : "cmake -DCMAKE_Fortran_COMPILER=scorep-ifort -DJURECA=ON ..",
		   "no_vec":'cmake -DCMAKE_Fortran_COMPILER=ifort -DJURECA=ON -DCMAKE_Fortran_FLAGS="-no-simd -no-vec" ..',
		   "no_fma":'cmake -DCMAKE_Fortran_COMPILER=ifort -DJURECA=ON -DCMAKE_Fortran_FLAGS="-no-fma" ..'}.get("${compile_mode}","cmake -DCMAKE_Fortran_COMPILER=ifort -DJURECA=ON ..")</parameter>
    </parameterset>


    <fileset name="input_data">
      <copy>/homea/eocoe/eocoe06/old/paraver/extrae.xml</copy>
      <copy>/homea/eocoe/eocoe06/old/paraver/trace.sh</copy>
    </fileset>


    <parameterset name="systemParameter" init_with="platform.xml">

      <parameter name="use_scalasca" mode="python">"${exec_mode}" == "scalasca"</parameter>
      <parameter name="use_extrae" mode="python">"${exec_mode}" == "extrae"</parameter>
      <parameter name="use_allinea" mode="python">"${exec_mode}" == "allinea"</parameter>
      <parameter name="use_ref_mode" mode="python">"${exec_mode}" == "ref_mode"</parameter>
      <parameter name="use_no_vec_mode" mode="python">"${exec_mode}" == "no_vec_mode"</parameter>
      <parameter name="use_no_fma_mode" mode="python">"${exec_mode}" == "no_fma_mode"</parameter>
      <parameter name="use_memory_mode" mode="python">"${exec_mode}" == "memory_mode"</parameter>

      <parameter name="exec_mode" mode="python">
		  {"ref_compile" : ",".join([i for i in "${ref_mode} ${allinea_mode} ${memory_mode}".split(" ") if len(i) > 0])}.get("${compile_mode}","${compile_mode}")
		  </parameter>
      <parameter name="nodes" type="int">1</parameter>
      <parameter name="taskspernode" type="int">1</parameter>
      <parameter name="threadspertask" type="int">1</parameter>
      <parameter name="exec_dir">compilation/mdft-dev/build</parameter>
      <parameter name="executable">${exec_dir}/mdft-dev</parameter>
      <parameter name="mail">cedric.gageat@ens.fr</parameter>
      <parameter name="notification">FAIL</parameter>
      <parameter name="timelimit">00:30:00</parameter>
      <parameter name="measurement" mode="python">
        {"memory" : '/usr/bin/time -f "Maximum resident set size of the process during its lifetime in Kilobytes: %M"'}.get("${exec_mode}","/usr/bin/time -p")
      </parameter>
      <parameter name="env" mode="python">
        {"scalasca" : "module load $load_modules Scalasca",
         "allinea" : "module load $load_modules AllineaPerformanceReports",
         "extrae" : "module load $load_modules Extrae"}.get("$exec_mode", "module load $load_modules")
      </parameter>

    </parameterset>


    <parameterset name="executeset" init_with="platform.xml">
      <parameter name="trace_dir">scorep_mdft_trace</parameter>
      <parameter name="starter" mode="python">
        {"scalasca" : "scalasca -analyze -e $trace_dir",
        "allinea" : "perf-report",
        "extrae" : "./trace.sh"}.get("${exec_mode}","")
      </parameter>
    </parameterset>

    <!-- commands -->
    <step name="compilation" export="true">
      <use>compile_parameters</use> <!-- use existing parameterset -->
      <include from="mdft_jube_include.xml" path="compilation_dos/do"/>
    </step>

<!--     EXECUTION             -->

    <substituteset name="executesub" init_with="platform.xml">
      <sub source="#PREPROCESS#" dest="$preprocess" />
      <sub source="#POSTPROCESS#" dest="$postprocess" />
      <sub source="#MEASUREMENT#" dest="$measurement" />
    </substituteset>


    <step name="run" depend="compilation">
      <do>echo "============= run : $exec_mode based on compilation $compile_mode  =========="</do>
      
      <use>compile_parameters</use>
      <use>systemParameter</use>
      <use>executeset</use>
      <use>executesub</use>
      <use from="platform.xml">jobfiles</use>
      <use>input_data</use>
      <do>ln -s ${exec_dir}/input</do>
      <do done_file="${done_file}">${submit} ${submit_script}</do>
    </step>





    <patternset name="pattern">
      <pattern name="time_pat">MDFT finished in       (.+)$</pattern>
      <pattern name="energy_pat">^\*\*\*\*\*[\ ]*[0-9\.D]*[\ ]*[0-9\.D]*[\ ]*[0-9\.D]*[\ ]*[0-9\.D]*[\ ]*[0-9\.D]*[\ ]*[0-9\.D]*[\ ]*[0-9\.D\-\+]*[\ ]*([0-9\.D\-\+]*)</pattern>
      <pattern name="iteration_pat">^\*\*\*\*\*[\ ]*([0-9\.D]*)[\ ]*[0-9\.D]*[\ ]*[0-9\.D]*[\ ]*[0-9\.D]*[\ ]*[0-9\.D]*[\ ]*[0-9\.D]*[\ ]*[0-9\.D\-\+]*[\ ]*[0-9\.D\-\+]*</pattern>
   </patternset>


   <analyser name="analyse">
      <analyse step="run">
        <file use="pattern">job.out</file>
      </analyse>
    </analyser>

    <result>
      <use>analyse</use>
      <table name="result" style="pretty" sort="mmax">
        <column>compile_mode</column>
        <column>exec_mode</column>
        <column>time_pat</column>
        <column>energy_pat</column>
        <column>iteration_pat</column>
      </table>
    </result>






    <fileset name="postprocessing_files">
      <copy>extract_metrics.py</copy>
      <copy>shuffle_json.py</copy>
    </fileset>


    <step name="postprocess" depend="run" shared="shared_dir">
      <use>postprocessing_files</use>
      <use>executeset</use>
      <do>cp shuffle_json.py shared_dir</do>
      <do>python extract_metrics.py -o shared_dir/metrics_${exec_mode}_time.json time -tag ${exec_mode} run/std.err</do>
      <do active="$use_scalasca">module load $load_modules Scalasca</do>
      <do active="$use_scalasca">scalasca -examine -s run/$trace_dir</do>
      <do active="$use_scalasca">python extract_metrics.py -o metrics_scalasca.json scalasca run/$trace_dir/profile.cubex; cp metrics_scalasca.json shared_dir</do>
      <do active="$use_memory_mode">python extract_metrics.py -o metrics_mem.json mem_serialomp run/std.err; cp metrics_mem.json shared_dir</do>
      <do shared="true">python shuffle_json.py agg *.json</do>
      <do shared="true">python shuffle_json.py tex out.json</do>
      <do shared="true">mv out.tex ${jube_benchmark_home}/${jube_benchmark_id}_out.tex</do>
    </step>

<!--
    <analyser name="scalasca_analyse">
      <use from="scalasca_in.xml">scalasca_pattern</use>
      <analyse step="postprocess">
        <file>metrics_scalasca.json</file>
      </analyse>
    </analyser>


    <result tag="scalasca,all">
      <use>scalasca_analyse</use>
      <table name="result_scalasca" transpose="true" style="pretty" sort="exec_time">
        <column title="jube_run_id">jube_wp_parent_run_id</column>
        <column title="P2P_Calls[nb]">sca_comms_p2p</column>
        <column title="Collective_Calls[nb]">sca_comms_coll</column>
        <column format=".2f" title="Message_Size[kB]">sca_msg_size</column>
        <column format=".2f" title="Load_Imbalance_MPI">sca_load_imbalance</column>
        <column title="Collective_Calls[s]" format=".2f">sca_comms_coll_s</column>
        <column format=".2f" title="Total_Time[s]">sca_time</column>
        <column format=".2f" title="P2P_Calls[s]">sca_mpi_point2point</column>
        <column format=".2f" title="Ratio_Synchro_Wait_OpenMP">sca_ratio_synchro_wait_omp</column>
        <column format=".2f" title="Synchro_Wait_MPI[s]">sca_delay_mpi</column>
        <column format=".2f" title="Ratio_Synchro_Wait_MPI">sca_ratio_synchro_wait_mpi</column>
        <column format=".2f" title="Time_MPI[s]">sca_mpi</column>
      </table>
    </result>

-->
  </benchmark>

</jube>
